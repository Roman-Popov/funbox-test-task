{"version":3,"sources":["components/NodeList.js","App.js","serviceWorker.js","index.js"],"names":["NodeList","expandList","list","classList","toggle","_this2","this","_this$props","props","nodes","addNode","removeNode","dragStart","dragOver","dragEnd","react_default","a","createElement","className","id","onSubmit","title","htmlFor","type","autoComplete","required","placeholder","length","map","node","index","key","onDragOver","e","draggable","onDragStart","onDragEnd","name","onClick","placemark","currentTarget","parentNode","setTimeout","window","startTests","document","querySelector","scrollIntoView","Component","App","state","draggedItem","markedItem","preventDefault","ymaps","mapCenter","getCenter","nodesCopy","Object","toConsumableArray","_this","polyline","polylineLength","geometry","getLength","inputElem","getElementById","placemarkName","value","Placemark","balloonContent","concat","preset","newNode","events","add","changeCoordinates","options","set","geoObjects","push","setState","placemarkIndex","properties","get","remove","splice","forEach","newCoordinates","getCoordinates","dataTransfer","effectAllowed","setData","target","setDragImage","_this$state","draggedOverItem","updNodes","filter","_this$state2","ready","Map","center","zoom","Polyline","components_NodeList","style","width","height","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb0c853b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass NodeList extends Component {\r\n\r\n    expandList = (list) => {\r\n        list.classList.toggle('visible')\r\n    }\r\n\r\n    render() {\r\n        const { nodes, addNode, removeNode,\r\n            dragStart, dragOver, dragEnd } = this.props;\r\n\r\n        return (\r\n            <div className=\"control-panel\">\r\n                <form\r\n                    id=\"add-node\"\r\n                    onSubmit={addNode}\r\n                >\r\n                    <label\r\n                        title=\"Введите название новой точки\"\r\n                        htmlFor=\"placemark-name\"\r\n                    >\r\n                        Добавить новую точку:\r\n                    </label>\r\n\r\n                    <div className=\"input-wrapper\">\r\n                        <input\r\n                            id=\"placemark-name\"\r\n                            type=\"text\"\r\n                            autoComplete=\"off\"\r\n                            required={true}\r\n                            placeholder=\"Название точки\"\r\n                        />\r\n                        <button type=\"submit\" title=\"Добавить\">+</button>\r\n                    </div>\r\n                </form>\r\n\r\n                <h3>Список точек</h3>\r\n                {nodes.length === 0 ?\r\n                <span>Точек пока нет</span> :\r\n                <ol className=\"node-list\">\r\n                    {nodes.map((node, index) => (\r\n                        <li\r\n                            key={index}\r\n                            className=\"node-item\"\r\n                            onDragOver={(e) => dragOver(e, index)}\r\n                        >\r\n                            <div\r\n                                className=\"drag\"\r\n                                draggable\r\n                                onDragStart={e => dragStart(e, index)}\r\n                                onDragEnd={dragEnd}\r\n                            >\r\n                                <div className=\"arrows\"></div>\r\n                                <div className=\"substrate\"></div>\r\n                                <div className=\"bar\"></div>\r\n                                <div className=\"bar\"></div>\r\n                                <div className=\"bar\"></div>\r\n                            </div>\r\n                            <span className=\"node-name\">{node.name}</span>\r\n                            <button className=\"delete-node\" title=\"Удалить точку\" onClick={() => removeNode(node.placemark)}>\r\n                                <i className=\"bar\"></i>\r\n                                <i className=\"bar\"></i>\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n                }\r\n\r\n                {/* Responsive Design */}\r\n                {/* Для просмотра на узких экранах - панель точек открывается по клику */}\r\n                <div id=\"expand-note\" onClick={(e) => this.expandList(e.currentTarget.parentNode)}>\r\n                    <span>Показать список точек</span>\r\n                </div>\r\n                <button\r\n                    id=\"expand-list\"\r\n                    onClick={(e) => this.expandList(e.currentTarget.parentNode)}\r\n                >\r\n                    <span className=\"expand-arrow\"></span>\r\n                </button>\r\n\r\n                <button\r\n                    className=\"run-tests\"\r\n                    onClick={() => setTimeout(() => {\r\n                        window.startTests();\r\n                        document.querySelector('.jasmine_html-reporter').scrollIntoView();\r\n                    }, 1)}\r\n                >\r\n                    Запустить тесты\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeList;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport NodeList from './components/NodeList';\n\nclass App extends Component {\n\n    state = {\n        nodes: [],\n        draggedItem: null,\n        markedItem: null\n    }\n\n\n    componentDidMount() {\n        const ymaps = window.ymaps,\n            init = () => {\n                // Создание карты\n                const map = new ymaps.Map(\"map\", {\n                    // Координаты центра карты\n                    // Порядок по умолчанию: «широта, долгота»\n                    center: [55.76, 37.64],\n\n                    // Уровень масштабирования. Допустимые значения:\n                    // от 0 (весь мир) до 19\n                    zoom: 10\n                }),\n                // Создание геообъекта с типом полилиния\n                polyline = new ymaps.Polyline([]);\n\n                // Размещение геообъекта на карте\n                map.geoObjects.add(polyline);\n\n                window.map = map;\n                window.polyline = polyline;\n            }\n\n        ymaps.ready(init);\n    }\n\n\n    // Добавление узла\n    addNode = (e) => {\n        // Отменить перезагрузку страницы по отправке формы\n        e.preventDefault();\n\n        const ymaps = window.ymaps,\n            map = window.map,\n            mapCenter = map.getCenter(),\n            nodesCopy = [...this.state.nodes],\n            polyline = window.polyline,\n            polylineLength = polyline.geometry.getLength(),\n            inputElem = document.getElementById('placemark-name'),\n            placemarkName = inputElem.value,\n            placemark = new ymaps.Placemark(mapCenter,\n                {\n                    index: polylineLength,\n                    balloonContent:\n                        `<div class=\"balloon-body\">\n                            <span>${placemarkName}</span>\n                        </div>`\n                },\n                {\n                    preset: 'islands#blueDotIcon',\n                    draggable: true\n                }\n            ),\n            newNode = {\n                placemark: placemark,\n                name: placemarkName\n            };\n\n        placemark.events\n            .add('dragend', () => this.changeCoordinates(placemark))\n            .add('mouseenter', () => placemark.options.set('preset', 'islands#redDotIcon'))\n            .add(['mouseleave', 'balloonclose'], () => placemark.options.set('preset', 'islands#blueDotIcon'));\n\n        // Очистить поле ввода после добавления точки\n        inputElem.value = '';\n\n        // Добавление маркера и узла линии на карту\n        map.geoObjects.add(placemark);\n        polyline.geometry.set(polylineLength, mapCenter)\n\n        nodesCopy.push(newNode);\n\n        this.setState({ nodes: nodesCopy })\n    }\n\n\n    // Удаление узла\n    removeNode = (placemark) => {\n        const map = window.map,\n            polyline = window.polyline,\n            nodesCopy = [...this.state.nodes],\n            placemarkIndex = placemark.properties.get('index');\n\n        // Удаление маркера и узла линии с карты\n        map.geoObjects.remove(placemark);\n        polyline.geometry.remove(placemarkIndex);\n\n        nodesCopy.splice(placemarkIndex, 1);\n        nodesCopy.forEach((node, index) => node.placemark.properties.set('index', index))\n\n        this.setState({ nodes: nodesCopy })\n    }\n\n\n    // Корректировка положения узла линии\n    changeCoordinates = (placemark) => {\n        const polyline = window.polyline,\n            newCoordinates = placemark.geometry.getCoordinates(),\n            placemarkIndex = placemark.properties.get('index');\n\n        polyline.geometry.set(placemarkIndex, newCoordinates);\n    }\n\n\n    // Реализация поведения Drag'n'Drop\n    // Идея взята отсюда: https://bit.ly/2sZAiAJ\n    onDragStart = (e, index) => {\n        const draggedItem = this.state.nodes[index];\n\n        e.dataTransfer.effectAllowed = \"move\";\n        e.dataTransfer.setData(\"text/html\", e.target.parentNode);\n        e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n\n        this.setState({ draggedItem })\n    };\n\n\n    onDragOver = (e, index) => {\n        e.preventDefault();\n\n        const { nodes, draggedItem, markedItem } = this.state,\n            draggedOverItem = nodes[index];\n\n        // Если объект находится сам над собой - ничего не делать\n        if (draggedItem === draggedOverItem) {\n            return;\n        } else {\n            // Отфильтровать перетаскиваемый объект\n            const updNodes = nodes.filter(node => node !== draggedItem);\n\n            // Добавить перетаскиваемый объект на место указываемого\n            updNodes.splice(index, 0, draggedItem);\n\n            if (markedItem) markedItem.classList.remove('dragged');\n            e.currentTarget.classList.add('dragged');\n\n            this.setState({ nodes: updNodes, markedItem: e.currentTarget });\n        }\n    };\n\n\n    onDragEnd = () => {\n        const { nodes, markedItem } = this.state,\n            polyline = window.polyline;\n\n        // Обновить геометрию на карте\n        nodes.forEach((node, index) => {\n            node.placemark.properties.set('index', index)\n\n            polyline.geometry.set(index, node.placemark.geometry.getCoordinates())\n        })\n\n        if (markedItem) markedItem.classList.remove('dragged');\n\n        this.setState({ draggedItem: null, markedItem: null });\n    };\n\n\n    render() {\n        const { nodes } = this.state;\n\n        return (\n            <div className=\"App\">\n\n                <NodeList\n                    nodes={nodes}\n                    addNode={this.addNode}\n                    removeNode={this.removeNode}\n                    dragStart={this.onDragStart}\n                    dragOver={this.onDragOver}\n                    dragEnd={this.onDragEnd}\n                />\n\n                <div id=\"map\" style={{width: '100%', height: '100%'}}></div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}